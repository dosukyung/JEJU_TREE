<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="userDao">
	 <!--일반회원 기능 -->	
	 	
	 	<insert id="UserJoin" parameterType="userDto">
	 		<!-- //여기가 insert임 -->
 		 	<selectKey keyProperty="id" resultType="int" order="BEFORE">
       			select count(*) + 1 from user
   			</selectKey>
       		insert into user values(#{user_id},#{user_pwd},#{user_email},#{user_nickname},default,#{user_image},default,#{user_phone},0,default,default,#{id})
    	</insert>
    	<!--카카오 유저 회원가입  -->
    	<insert id="KaKaoJoin" parameterType="userDto">
		    <selectKey keyProperty="id" resultType="int" order="BEFORE">
		        SELECT COUNT(*) + 1 FROM user
		    </selectKey>
		    INSERT INTO user (user_id, user_pwd, user_email, user_nickname, is_admin, user_image, user_like_keyword, user_phone, user_iskakao, mailKey, mailAuth, id)
			VALUES (#{user_id}, #{user_pwd}, #{user_email}, #{user_nickname}, default, #{user_image}, default, #{user_phone},default, default, default, #{id});
		</insert>
 		<!--일반 회원가입 회원 정보조회  -->
		<select id="UserInfo" parameterType="String" resultType="userDto">
			select * from testDB.user where user_id = #{user_id}
		</select>
		<!--일반 회원테이블의 세션의 이메일 정보와 일치하는 회원 정보조회  -->
		<select id="iskakaouserinfo" parameterType="String" resultType="userDto">
			select * from user where user_email = #{user_email}
		</select>
		<!--하림님(id로 일반 탈퇴)   -->
	    <delete id="Normaldelete" parameterType="int">
	       delete from user where id = #{id}
	    </delete>
	    <!--시퀀스 정리작업 -->
	     <update id="UpdateSequence" parameterType="int">
       	   UPDATE user SET id = id - 1 WHERE id > #{id}
    	</update>
	    <delete id="temporaryDelete" parameterType="String">
	   		delete from temporary_kakao_user where user_email = #{user_email}
	    </delete>
	    <delete id="KaKaoDelete" parameterType="String">
	   		delete from user where user_id = #{user_email}
	    </delete>
	    <!--하림님(id로 일반 탈퇴)   -->
	    <select id="getuserById" parameterType="int" resultType="userDto">
	    	select * from user where id = #{id}
	 	</select>
 		<!-- 회원정보 수정(하림님) -->
	    <update id="updateMember" parameterType="userDto">
	    	update user set user_id = #{user_id}, user_pwd = #{user_pwd}, user_phone = #{user_phone}, user_nickname = #{user_nickname}, user_email = #{user_email}, user_image = #{user_image} where id = #{id}
	    </update>
	    <!--수정시 비번 체크(하림님)  -->
 		<select id="checkPwd" parameterType="int" resultType="String" >
      		select user_pwd from user where id = #{id}
   		</select>
		
 	<!--카카오 기능 -->
 		
 		<select id="kakao_email_info" parameterType="String" resultType="userDto">
 			select * from testDB.user where user_email = #{kakao_email}
 		</select>
 		<!--임시 가입 테이블에서 이메일로 회원정보 추출 -->
 		<select id="kakaoUserInfo" parameterType="String" resultType="TemporaryDto">
 			select * from testDB.temporary_kakao_user where user_email = #{user_email}
 		</select>
 		<!--카카오 로그인시 임시 회원정보 삽입  -->
 		<insert id="kakao_insert" parameterType="String">
 			INSERT INTO testDB.temporary_kakao_user(user_email, user_join) VALUES(#{user_email},0);
 		</insert>
 		<update id="UpdatekakaoJoin" parameterType="String">
 			update temporary_kakao_user set user_join = 1 where user_email = #{user_email}
 		</update>
 		<!--user_Table iskakao update  -->
 		<update id="updateIsKaKao" parameterType="String">
 			update user set user_iskakao = 1 where user_id = #{user_email}
 		</update>
 	<!--이메일 관련 기능 -->
	 	<update id="updateMailKey" parameterType="userDto">
	       update user set mailKey = #{mailKey} where user_email = #{user_email} and user_id = #{user_id}
	   </update>
	    <!-- 메일  변경을 하면 인증키  mailkey 컬럼 업데이트 -->
	   <update id="updateMail" parameterType="userDto">
	       update user set mailKey = #{mailKey} where id = #{id}
	   </update>
	   <select id="checkEmail" parameterType="String" resultType="int">
	      select count(*) from user where user_email = #{user_email}
	   </select>
	   <!-- 메일 인증을 하면 mail_auth 컬럼을 기본값 0에서 1로 바꿔 로그인을 허용 -->
	   <update id="updateMailAuth" parameterType="userDto">
	       update user set mailAuth=1 where user_email = #{user_email} and mailKey = #{mailKey}
	   </update>
	   <!-- 이메일 인증을 안 했으면 0을 반환, 로그인 시 인증했나 안 했나 체크하기 위함 -->
	   <select id="emailAuthFail" parameterType="String" resultType="int">
	       select count(*) from user where user_id = #{user_id} and mailAuth = 1
	   </select>
	   <select id="emailCheck" parameterType="int" resultType="String" >
           select user_email from user where id = #{id}
   	   </select>
   	    <update id="updatePwd" parameterType="userDto">
   	       update user set user_pwd = #{user_pwd} where id = #{id}
   	   </update>
   	   <select id="getUserByEmail" parameterType="String" resultType="userDto">
   	       select * from user where user_email = #{user_email}
   	   </select>
   	   <select id="nickCheck" parameterType="String" resultType="userDto">
   	      select * from user where user_nickname = #{user_nickname}
   	   </select>
   	   <select id="userId" parameterType="String" resultType="userDto">
   	      select * from user where user_id = #{user_id}
   	   </select>
   	   
   
   <!--공유 관련 기능  --> 
   		<!--동행자 정보 입력 하기  -->
		<insert id="insertParticipant" parameterType="participantsDto">
			insert into plan_participants(user_id,user_share_id)values(#{user_id},#{user_share_id})		
		</insert>
		<!--해당 플랜 공유자와 사용자 id 중복 여부 확인  -->
		<select id="selfShareCheck" parameterType="java.util.HashMap" resultType="int">
			select count(*) from plan_participants where user_id = #{user_id} and user_share_id= #{user_share_id}
		</select>
 </mapper>
 